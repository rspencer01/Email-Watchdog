#!/usr/bin/env python
"""The command line entry point to the nimbus systems."""

import argparse
import datetime

import HTML

import yaml

config = yaml.full_load(open("config.yaml"))

parser = argparse.ArgumentParser(
    "nibus-cli",
    description="The command line interface to the nimbus suite of utilities.",
)
subparsers = parser.add_subparsers(dest="submodule")

persistent = subparsers.add_parser(
    "persistent", description="Utilities to initialise and query the persistent store."
)
persistent.add_argument("action", choices=["init"])

travel = subparsers.add_parser("travel")
travel.add_argument("action", choices=["current_position", "set_off", "week", "day"])

calendar = subparsers.add_parser("calendar")
calendar.add_argument("action", choices=["next"])

notifications = subparsers.add_parser("notifications")
notifications.add_argument("action", choices=["update"])

notifications = subparsers.add_parser("email")
notifications.add_argument("action", choices=["since"])
notifications.add_argument("when")

notifications = subparsers.add_parser("email_invites")
notifications.add_argument("action", choices=["update"])

args = parser.parse_args()

if args.submodule == "persistent":
    if args.action == "init":
        import nimbus.persistent
        from nimbus.persistent.notification import Notification
        from nimbus.persistent.last import Last

        nimbus.persistent.db.create_tables([Last, Notification])

if args.submodule == "travel":
    import nimbus.travel
    import nimbus.set_off_reminders

    if args.action == "current_position":
        print(yaml.dump(nimbus.travel.current_position()))
    if args.action == "set_off":
        nimbus.set_off_reminders.get_set_off_reminder()
    if args.action == "week":
        import gpx_trip
        import nimbus.notifications
        from nimbus.html_screenshot import BOOTSTRAP_FORMAT, get_screenshot

        locations = {}
        for single_date in (
            datetime.datetime.now() - datetime.timedelta(n) for n in range(2, 8)
        ):
            info = gpx_trip.extract_info(
                open(
                    single_date.strftime(config["tracking"]["historic_data_file"])
                ).read(),
                predefined_stops=config["places"],
            )
            for stop in info["time_at_stops"]:
                if info["stops"][stop]["short_name"] not in locations:
                    locations[info["stops"][stop]["short_name"]] = info[
                        "time_at_stops"
                    ][stop]
                else:
                    locations[info["stops"][stop]["short_name"]] += info[
                        "time_at_stops"
                    ][stop]
        loc_sorted = sorted(locations.keys(), key=lambda x: locations[x])
        table = HTML.table(
            [
                [
                    i,
                    "{}:{}".format(
                        locations[i].days * 24 + int(locations[i].seconds) // 3600,
                        int(locations[i].seconds) % 3600 // 60,
                    ),
                ]
                for i in loc_sorted[:-5:-1]
            ],
            header_row=["Place", "Time"],
            style="",
            cellpadding=None,
            border="",
            attribs={"class": "table"},
        )
        html = BOOTSTRAP_FORMAT.format(
            "<h1>Places Visited</h1><h3>{:%Y-%m-%d} to {:%Y-%m-%d}</h3>{}".format(
                datetime.datetime.now() - datetime.timedelta(days=9),
                datetime.datetime.now() - datetime.timedelta(days=2),
                table,
            )
        )
        nimbus.notifications.add_notification(
            "", photo=get_screenshot(html.encode("utf-8"))
        )
    if args.action == "day":
        import gpx_trip
        import nimbus.notifications
        from nimbus.html_screenshot import BOOTSTRAP_FORMAT, get_screenshot

        info = gpx_trip.extract_info(
            open(
                (datetime.datetime.now() - datetime.timedelta(days=2)).strftime(
                    config["tracking"]["historic_data_file"]
                )
            ).read(),
            predefined_stops=config["places"],
        )
        tbl = []
        for trip in info["trips"]:
            from_loc = info["stops"][trip["from"]]
            to_loc = info["stops"][trip["to"]]
            tbl.append([trip['start'].strftime("%H:%M"),from_loc["emoji_name"], "->", to_loc["emoji_name"],trip['end'].strftime("%H:%M"),])
        html = BOOTSTRAP_FORMAT.format(
            "<h1>Trips today</h1><h3>{:%Y-%m-%d}</h3>{}".format(
                datetime.datetime.now(),
                HTML.table(
                    tbl,
                    attribs={"class": "table"},
                    cellpadding=None,
                    style="",
                    border="",
                ),
            )
        )
        nimbus.notifications.add_notification("", photo=get_screenshot(html.encode('utf-8')))

if args.submodule == "calendar":
    import nimbus.calendars

    if args.action == "next":
        print(yaml.dump(nimbus.calendars.get_next_event()))

if args.submodule == "notifications":
    import nimbus.notifications

    if args.action == "update":
        nimbus.notifications.update()

if args.submodule == "email":
    import nimbus.emails
    import dateparser

    if args.action == "since":
        for email in nimbus.emails.get_emails_since(dateparser.parse(args.when)):
            print("When:   {}".format(email.date))
            print("To:   {}".format(email.to))
            print("From: {}".format(email.from_))
            #            print("Body:\n{}".format(email.body))
            print("Message:\n{}".format(nimbus.emails.extract_message(email)))
            print("Salutation:\n{}".format(nimbus.emails.extract_salutation(email)))
            print()

if args.submodule == "email_invites":
    import nimbus.event_invitations

    nimbus.event_invitations.update()

#!/usr/bin/env python
"""The command line entry point to the nimbus systems."""

import argparse

import yaml


parser = argparse.ArgumentParser(
    "nibus-cli",
    description="The command line interface to the nimbus suite of utilities.",
)
subparsers = parser.add_subparsers(dest="submodule")

persistent = subparsers.add_parser(
    "persistent", description="Utilities to initialise and query the persistent store."
)
persistent.add_argument("action", choices=["init"])

travel = subparsers.add_parser("travel")
travel.add_argument("action", choices=["current_position", "set_off"])

calendar = subparsers.add_parser("calendar")
calendar.add_argument("action", choices=["next"])

notifications = subparsers.add_parser("notifications")
notifications.add_argument("action", choices=["update"])

notifications = subparsers.add_parser("email")
notifications.add_argument("action", choices=["since"])
notifications.add_argument("when")

notifications = subparsers.add_parser("email_invites")
notifications.add_argument("action", choices=["update"])

args = parser.parse_args()

if args.submodule == "persistent":
    if args.action == "init":
        import nimbus.persistent
        from nimbus.persistent.notification import Notification
        from nimbus.persistent.last import Last

        nimbus.persistent.db.create_tables([Last, Notification])

if args.submodule == "travel":
    import nimbus.travel
    import nimbus.set_off_reminders

    if args.action == "current_position":
        print(yaml.dump(nimbus.travel.current_position()))
    if args.action == "set_off":
        nimbus.set_off_reminders.get_set_off_reminder()

if args.submodule == "calendar":
    import nimbus.calendars

    if args.action == "next":
        print(yaml.dump(nimbus.calendars.get_next_event()))

if args.submodule == "notifications":
    import nimbus.notifications

    if args.action == "update":
        nimbus.notifications.update()

if args.submodule == "email":
    import nimbus.emails
    import dateparser

    if args.action == "since":
        for email in nimbus.emails.get_emails_since(dateparser.parse(args.when)):
            print("When:   {}".format(email.date))
            print("To:   {}".format(email.to))
            print("From: {}".format(email.from_))
            #            print("Body:\n{}".format(email.body))
            print("Message:\n{}".format(nimbus.emails.extract_message(email)))
            print("Salutation:\n{}".format(nimbus.emails.extract_salutation(email)))
            print()

if args.submodule == "email_invites":
    import nimbus.event_invitations

    nimbus.event_invitations.update()

#!/usr/bin/env python3

"""Runs the email daemon."""

import argparse
import datetime
import imaplib
import logging

import caldav

import mailparser

from nimbus.notifications import add_notification, get_response, update
from nimbus.process_mail import process_mail

import yaml

config = yaml.full_load(open("config.yaml"))

parser = argparse.ArgumentParser()
parser.add_argument("--inbox-only", action="store_true")

args = parser.parse_args()

client = caldav.DAVClient(
    "https://{username}:{password}@{url}".format(**config["calendars"][0])
)
principal = client.principal()
calendars = principal.calendars()
personal_calendar = [i for i in calendars if i.name == config["calendars"][0]["name"]][
    0
]

previous_dates = {}

try:
    check_since = datetime.datetime.strptime(
        open("last").read().strip(), "%d-%m-%Y %H:%M:%S"
    )
except Exception:
    check_since = datetime.datetime.now() - datetime.timedelta(days=1000)
open("last", "w").write(datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
try:
    seen = set(map(lambda x: x.strip(), open("seen").readlines()))
except Exception:
    seen = set()


logging.basicConfig(filename="emailparser.log", level=logging.WARN)
logFormatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s: %(message)s")
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
consoleHandler.setLevel(logging.INFO)
logging.getLogger().addHandler(consoleHandler)
logf = logging.getLogger()


res = []
for email_account in config["email_accounts"]:
    with imaplib.IMAP4_SSL(email_account["server"]) as M:
        M.login(email_account["username"], email_account["password"])
        if args.inbox_only:
            mailboxes = ["INBOX"]
        else:
            r, mailboxes = M.list()
            if r != "OK":
                logf.error("No mailboxes")
                exit(1)
            mailboxes = [mb.decode("utf-8").split(' "/" ')[1] for mb in mailboxes]
        logf.info("Checking mailboxes {}".format(mailboxes))
        for mailbox in mailboxes:
            logf.info("Checking mailbox {}".format(mailbox))
            resp, _ = M.select(mailbox, readonly=True)
            if resp != "OK":
                logf.warn(
                    "Could not select mailbox %s in account %s",
                    mailbox,
                    email_account["name"],
                )
                continue
            r, data = M.search(
                None, '(SINCE "{}")'.format(check_since.strftime("%d-%b-%Y"))
            )
            for message_uid in data[0].decode("utf-8").split():
                cd = "{}/{}/{}".format(email_account["name"], mailbox, message_uid)
                if cd in seen:
                    continue
                open("seen", "a").write("\n" + cd)
                r, data = M.fetch(message_uid, "(RFC822)")
                try:
                    em = mailparser.parse_from_bytes(data[0][1])
                except Exception:
                    continue
                res += process_mail(em)


for r in res:
    t = r.telegram()
    if t is None:
        continue
    notification_id = add_notification(t, response_required=True)
    while get_response(notification_id) is None:
        update()
    if get_response(notification_id) == "yes":
        personal_calendar.add_event(r.ical())
